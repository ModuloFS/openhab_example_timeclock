
var Timer timer_astro_sunrise_rollo = null
var Timer timer_astro_sunset_rollo = null

val Number OFF_SUNSET_MAX = 180 // Represents 3 am


rule "Astroclock_Initialization"
when 
	Item DEBUG_ResetAstroclock received command ON
then

	postUpdate(LOCAL_TriggerdelaySunset_1, 60.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunset_1, 60.0)
	Thread::sleep(10)	
 	postUpdate(LOCAL_OntimeBeforeSunrise_1, 0.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunrise_1, 0.0) 

	Thread::sleep(10)
	postUpdate(LOCAL_TriggerdelaySunset_2, 60.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunset_2, 60.0)
	Thread::sleep(10)	
 	postUpdate(LOCAL_OntimeBeforeSunrise_2, 0.0)
	Thread::sleep(10)
 	postUpdate(LOCAL_OntimeAfterSunrise_2, 0.0) 
	 
 end



rule "Astrofunction_1"
when
	// Run every 5 minutes with an offset of 2 minutes
	Time cron "0 2-59/5 * * * ?"

then

	var DateTime datetime_converter = new DateTime()

	var Number sunset_minute_of_day = 0
	var Number sunrise_minute_of_day = 0
	var Number now_minute_of_day = 0

	var Number on_sunset = 0
	var Number off_sunset = 0

	var Number on_sunrise = 0
	var Number off_sunrise = 0

	// Konvertierung Zeit Sonnenuntergang in Minuten des Tages
	datetime_converter = new DateTime(LOCAL_NauticDuskEnd.state.toString)
	sunset_minute_of_day = datetime_converter.getMinuteOfDay

	// Konvertierung Zeit Sonnenaufgang in Minuten des Tages
	datetime_converter = new DateTime(LOCAL_NauticDawnStart.state.toString)
	sunrise_minute_of_day = datetime_converter.getMinuteOfDay
	
	// Aktuelle Zeit in Minuten des Tages
	now_minute_of_day = now.getMinuteOfDay
	
	// Zeitupnkt an dem angeschalten werden soll bei Sonnenuntergang
	on_sunset = sunset_minute_of_day - 60 + (LOCAL_TriggerdelaySunset_1.state as DecimalType)
	if(on_sunset < 0) on_sunset = on_sunset + 1440 // Überlauf abfangen

	// Zeitpunkt an dem abgeschalten werden soll bei Sonnenuntergang
	off_sunset = (LOCAL_OntimeAfterSunset_1.state as DecimalType)

	// Zeitpunkt an dem eingeschalten werden soll bei Sonnenaufgang. Enthält die Variable keine Onzeit vor Sonnenaufgang so ist diese Funktion deaktiviert!
	if((LOCAL_OntimeBeforeSunrise_1.state as DecimalType).intValue > 0) on_sunrise = sunrise_minute_of_day - (LOCAL_OntimeBeforeSunrise_1.state as DecimalType).intValue
	else on_sunrise = 0

	// Zeitpunkt an dem ausgeschalten werden soll bei Sonnenaufgang
	off_sunrise = sunrise_minute_of_day + (LOCAL_OntimeAfterSunrise_1.state as Number)

	// Überprüfung ob durchgehend aktiv ist
	if(off_sunset > 1440)
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunrise))
		{
			// wir sind in der EIN-Phase
			if(LOCAL_Astrotrigger_1.state != ON) sendCommand(LOCAL_Astrotrigger_1, ON)
			return
		}

	}
			
	// Prüfung der Sunsetschaltzeiten

	if(on_sunset < off_sunset)
	{
		if((now_minute_of_day > on_sunset) && (now_minute_of_day < off_sunset))
		{
			// wir sind in der EIN-Phase!
			if(LOCAL_Astrotrigger_1.state != ON) sendCommand(LOCAL_Astrotrigger_1, ON)
			return
		}
	}

	if((on_sunset > off_sunset) && (off_sunset < OFF_SUNSET_MAX))
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunset))
		{
			// wir sind in der EIN-Phase
			if(LOCAL_Astrotrigger_1.state != ON) sendCommand(LOCAL_Astrotrigger_1, ON)
			return
		}
	}

	// Prüfung der Sunriseeinstellungen, ob aktiviert
	if(on_sunrise > 0)
	{
		if((now_minute_of_day > on_sunrise) && (now_minute_of_day < off_sunrise))
		{
			// wir sind in der EIN-Phase
			if(LOCAL_Astrotrigger_1.state != ON) sendCommand(LOCAL_Astrotrigger_1, ON)
			return
		}
	}

	// Sind wir hier angekommen, sind wir in der AUS-Phase
	if(LOCAL_Astrotrigger_1.state != OFF) sendCommand(LOCAL_Astrotrigger_1, OFF)

end




rule "Connect_Astro_Sunrise_and_Sunset_1"
when
	Item LOCAL_OntimeAfterSunset_1 received command 5000
then

	sendCommand(LOCAL_OntimeBeforeSunrise_1, 0)

end
	

// Astrofunktion 2

rule "Astrofunction_2"
when
	
	// Run every 5 minutes with an offset of 2 Minutes
	Time cron "0 2-59/5 * * * ?" or
	Item DEBUG_Switch received command ON
then

	var DateTime datetime_converter = new DateTime()

	var Number sunset_minute_of_day = 0
	var Number sunrise_minute_of_day = 0
	var Number now_minute_of_day = 0

	var Number on_sunset = 0
	var Number off_sunset = 0

	var Number on_sunrise = 0
	var Number off_sunrise = 0

	// Konvertierung Zeit Sonnenuntergang in Minuten des Tages
	datetime_converter = new DateTime(LOCAL_NauticDuskEnd.state.toString)
	sunset_minute_of_day = datetime_converter.getMinuteOfDay

	// Konvertierung Zeit Sonnenaufgang in Minuten des Tages
	datetime_converter = new DateTime(LOCAL_NauticDawnStart.state.toString)
	sunrise_minute_of_day = datetime_converter.getMinuteOfDay
	
	// Aktuelle Zeit in Minuten des Tages
	now_minute_of_day = now.getMinuteOfDay
	
	// Zeitupnkt an dem angeschalen werden soll bei Sonnenuntergang
	on_sunset = sunset_minute_of_day - 60 + (LOCAL_TriggerdelaySunset_2.state as DecimalType)
	if(on_sunset < 0) on_sunset = on_sunset + 1440 // Überlauf abfangen

	// Zeitpunkt an dem abgeschalten werden soll bei Sonnenuntergang
	off_sunset = (LOCAL_OntimeAfterSunset_2.state as DecimalType)

	// Zeitpunkt an dem eingeschalten werden soll bei Sonnenaufgang. Enthält die Variable keine Onzeit vor Sonnenaufgang so ist diese Funktion deaktiviert!
	if((LOCAL_OntimeBeforeSunrise_2.state as DecimalType).intValue > 0) on_sunrise = sunrise_minute_of_day - (LOCAL_OntimeBeforeSunrise_2.state as DecimalType).intValue
	else on_sunrise = 0

	// Zeitpunkt an dem ausgeschalten werden soll bei Sonnenaufgang
	off_sunrise = sunrise_minute_of_day + (LOCAL_OntimeAfterSunrise_2.state as DecimalType)

	// Überprüfung ob durchgehend aktiv ist
	if(off_sunset > 1440)
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunrise))
		{
			// wir sind in der EIN-Phase
			if(LOCAL_Astrotrigger_2.state != ON) sendCommand(LOCAL_Astrotrigger_2, ON)
			return
		}

	}
			
	// Prüfung der Sunsetschaltzeiten

	if(on_sunset < off_sunset)
	{
		if((now_minute_of_day > on_sunset) && (now_minute_of_day < off_sunset))
		{
			// wir sind in der EIN-Phase!
			if(LOCAL_Astrotrigger_2.state != ON) sendCommand(LOCAL_Astrotrigger_2, ON)
			return
		}
	}

	if((on_sunset > off_sunset) && (off_sunset < OFF_SUNSET_MAX))
	{
		if((now_minute_of_day > on_sunset) || (now_minute_of_day < off_sunset))
		{
			// wir sind in der EIN-Phase
			if(LOCAL_Astrotrigger_2.state != ON) sendCommand(LOCAL_Astrotrigger_2, ON)
			return

		}
	}

	// Prüfung der Sunriseeinstellungen, ob aktiviert
	if(on_sunrise > 0)
	{
		if((now_minute_of_day > on_sunrise) && (now_minute_of_day < off_sunrise))
		{
			// wir sind in der EIN-Phase
			if(LOCAL_Astrotrigger_2.state != ON) sendCommand(LOCAL_Astrotrigger_2, ON)
			return
		}
	}

	// Sind wir hier angekommen, sind wir in der AUS-Phase
	if(LOCAL_Astrotrigger_2.state != OFF) sendCommand(LOCAL_Astrotrigger_2, OFF)

end

rule "Connect_Astro_Sunrise_and_Sunset_2"
when
	Item LOCAL_OntimeAfterSunset_2 received command 5000
then

	sendCommand(LOCAL_OntimeBeforeSunrise_2, 0)

end
